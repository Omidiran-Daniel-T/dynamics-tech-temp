{"ast":null,"code":"\"use strict\"; // Production steps of ECMA-262, Edition 6, 22.1.2.1\n\nif (!Array.from) {\n  Array.from = function () {\n    var toStr = Object.prototype.toString;\n\n    var isCallable = function isCallable(fn) {\n      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n    };\n\n    var toInteger = function toInteger(value) {\n      var number = Number(value);\n\n      if (isNaN(number)) {\n        return 0;\n      }\n\n      if (number === 0 || !isFinite(number)) {\n        return number;\n      }\n\n      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n    };\n\n    var maxSafeInteger = Math.pow(2, 53) - 1;\n\n    var toLength = function toLength(value) {\n      var len = toInteger(value);\n      return Math.min(Math.max(len, 0), maxSafeInteger);\n    }; // The length property of the from method is 1.\n\n\n    return function from(arrayLike\n    /*, mapFn, thisArg */\n    ) {\n      // 1. Let C be the this value.\n      var C = this; // 2. Let items be ToObject(arrayLike).\n\n      var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).\n\n      if (arrayLike == null) {\n        throw new TypeError('Array.from requires an array-like object - not null or undefined');\n      } // 4. If mapfn is undefined, then let mapping be false.\n\n\n      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n      var T;\n\n      if (typeof mapFn !== 'undefined') {\n        // 5. else\n        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n        if (!isCallable(mapFn)) {\n          throw new TypeError('Array.from: when provided, the second argument must be a function');\n        } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n        if (arguments.length > 2) {\n          T = arguments[2];\n        }\n      } // 10. Let lenValue be Get(items, \"length\").\n      // 11. Let len be ToLength(lenValue).\n\n\n      var len = toLength(items.length); // 13. If IsConstructor(C) is true, then\n      // 13. a. Let A be the result of calling the [[Construct]] internal method\n      // of C with an argument list containing the single item len.\n      // 14. a. Else, Let A be ArrayCreate(len).\n\n      var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.\n\n      var k = 0; // 17. Repeat, while k < len… (also steps a - h)\n\n      var kValue;\n\n      while (k < len) {\n        kValue = items[k];\n\n        if (mapFn) {\n          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n        } else {\n          A[k] = kValue;\n        }\n\n        k += 1;\n      } // 18. Let putStatus be Put(A, \"length\", len, true).\n\n\n      A.length = len; // 20. Return A.\n\n      return A;\n    };\n  }();\n}","map":{"version":3,"sources":["C:/Users/Daniel/Documents/projects/react/dynamics-tech/node_modules/react-image-scroller/lib/array-from-polyfill.js"],"names":["Array","from","toStr","Object","prototype","toString","isCallable","fn","call","toInteger","value","number","Number","isNaN","isFinite","Math","floor","abs","maxSafeInteger","pow","toLength","len","min","max","arrayLike","C","items","TypeError","mapFn","arguments","length","undefined","T","A","k","kValue"],"mappings":"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","sourcesContent":["\"use strict\";\n\n// Production steps of ECMA-262, Edition 6, 22.1.2.1\nif (!Array.from) {\n  Array.from = function () {\n    var toStr = Object.prototype.toString;\n\n    var isCallable = function isCallable(fn) {\n      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n    };\n\n    var toInteger = function toInteger(value) {\n      var number = Number(value);\n\n      if (isNaN(number)) {\n        return 0;\n      }\n\n      if (number === 0 || !isFinite(number)) {\n        return number;\n      }\n\n      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n    };\n\n    var maxSafeInteger = Math.pow(2, 53) - 1;\n\n    var toLength = function toLength(value) {\n      var len = toInteger(value);\n      return Math.min(Math.max(len, 0), maxSafeInteger);\n    }; // The length property of the from method is 1.\n\n\n    return function from(arrayLike\n    /*, mapFn, thisArg */\n    ) {\n      // 1. Let C be the this value.\n      var C = this; // 2. Let items be ToObject(arrayLike).\n\n      var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).\n\n      if (arrayLike == null) {\n        throw new TypeError('Array.from requires an array-like object - not null or undefined');\n      } // 4. If mapfn is undefined, then let mapping be false.\n\n\n      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n      var T;\n\n      if (typeof mapFn !== 'undefined') {\n        // 5. else\n        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n        if (!isCallable(mapFn)) {\n          throw new TypeError('Array.from: when provided, the second argument must be a function');\n        } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n        if (arguments.length > 2) {\n          T = arguments[2];\n        }\n      } // 10. Let lenValue be Get(items, \"length\").\n      // 11. Let len be ToLength(lenValue).\n\n\n      var len = toLength(items.length); // 13. If IsConstructor(C) is true, then\n      // 13. a. Let A be the result of calling the [[Construct]] internal method\n      // of C with an argument list containing the single item len.\n      // 14. a. Else, Let A be ArrayCreate(len).\n\n      var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.\n\n      var k = 0; // 17. Repeat, while k < len… (also steps a - h)\n\n      var kValue;\n\n      while (k < len) {\n        kValue = items[k];\n\n        if (mapFn) {\n          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n        } else {\n          A[k] = kValue;\n        }\n\n        k += 1;\n      } // 18. Let putStatus be Put(A, \"length\", len, true).\n\n\n      A.length = len; // 20. Return A.\n\n      return A;\n    };\n  }();\n}"]},"metadata":{},"sourceType":"script"}