{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.defaultStatus = void 0;\n\nvar _emotion = require(\"emotion\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nrequire(\"./array-includes-polyfill\");\n\nrequire(\"./array-from-polyfill\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar FULLY_VISIBLE = 'FULLY_VISIBLE';\nvar PARTIALLY_VISIBLE = 'PARTIALLY_VISIBLE';\nvar NOT_VISIBLE = 'NOT_VISIBLE';\nvar defaultStatus = {\n  previous: 0,\n  current: [0],\n  next: 0\n};\nexports.defaultStatus = defaultStatus;\n\nfunction getStatus(items) {\n  var previous = null;\n  var current = [];\n  var next = null;\n  var prevItem;\n  items.forEach(function (item) {\n    // There may be any number of FULLY_VISIBLE items.\n    if (item.visibility === FULLY_VISIBLE) {\n      current.push(item.index);\n    } // There can only be two simultaneous PARTIALLY_VISIBLE items.\n    // If they are adjacent, there can be no FULLY_VISIBLE items.\n    // So these two items are 'previous' and 'next'.\n    else if (item.visibility === PARTIALLY_VISIBLE && prevItem && prevItem.visibility === PARTIALLY_VISIBLE) {\n      previous = prevItem.index;\n      next = item.index;\n    } // Keep pushing 'previous' forward each iteration until one of\n    // the above cases is true.\n    else if (current.length === 0 && next === null) {\n      previous = item.index;\n    } // The item following the final FULLY_VISIBLE item is 'next'.\n    else if (current.length > 0 && next === null) {\n      next = item.index;\n    } // Save this item to refer back to in the next iteration.\n\n\n    prevItem = item;\n  });\n  return {\n    previous: previous,\n    current: current,\n    next: next\n  };\n}\n\nvar _default = _react.default.forwardRef(Scroller);\n\nexports.default = _default;\n\nfunction Scroller(_ref, ref) {\n  var children = _ref.children,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$hideScrollbar = _ref.hideScrollbar,\n      hideScrollbar = _ref$hideScrollbar === void 0 ? true : _ref$hideScrollbar,\n      _ref$innerClassName = _ref.innerClassName,\n      innerClassName = _ref$innerClassName === void 0 ? '' : _ref$innerClassName,\n      _ref$innerStyle = _ref.innerStyle,\n      innerStyle = _ref$innerStyle === void 0 ? {} : _ref$innerStyle,\n      items = _ref.items,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n      _ref$renderWithin = _ref.renderWithin,\n      renderWithin = _ref$renderWithin === void 0 ? null : _ref$renderWithin,\n      _ref$scrollOnClick = _ref.scrollOnClick,\n      scrollOnClick = _ref$scrollOnClick === void 0 ? true : _ref$scrollOnClick,\n      _ref$scrollWithArrows = _ref.scrollWithArrows,\n      scrollWithArrows = _ref$scrollWithArrows === void 0 ? true : _ref$scrollWithArrows,\n      _ref$scrollContainerC = _ref.scrollContainerClassName,\n      scrollContainerClassName = _ref$scrollContainerC === void 0 ? '' : _ref$scrollContainerC,\n      _ref$scrollContainerS = _ref.scrollContainerStyle,\n      scrollContainerStyle = _ref$scrollContainerS === void 0 ? {} : _ref$scrollContainerS,\n      props = _objectWithoutProperties(_ref, [\"children\", \"className\", \"hideScrollbar\", \"innerClassName\", \"innerStyle\", \"items\", \"onChange\", \"renderWithin\", \"scrollOnClick\", \"scrollWithArrows\", \"scrollContainerClassName\", \"scrollContainerStyle\"]); // Either `items` or `children` may be used to set scroll items (`items` has priority)\n\n\n  items = items || _react.default.Children.toArray(children);\n  var mainRef = (0, _react.useRef)(null);\n  var scrollContainerRef = (0, _react.useRef)(null);\n  var itemsContainerRef = (0, _react.useRef)(null); // Track the indices of relevant items\n\n  var _useState = (0, _react.useState)({\n    previous: null,\n    current: [],\n    next: null\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  (0, _react.useLayoutEffect)(function () {\n    var main = mainRef.current;\n    var sc = scrollContainerRef.current;\n    sc.style.overflowX = 'scroll';\n    /* Manually hide the horizontal scrollbar with a hidden overflow.\r\n       `scrollbar-width: none` is not available across-the-board at time of implementation.\r\n    */\n\n    if (hideScrollbar) {\n      main.style.overflowY = 'hidden';\n      var scrollbarWidth = main.clientHeight - sc.clientHeight;\n      sc.style.height = \"calc(100% + \".concat(scrollbarWidth, \"px)\");\n    } else {\n      main.style.overflowY = '';\n      sc.style.height = '100%';\n    }\n    /* Manually limit the height of the contents of each item wrapper. There is no\r\n       reliable CSS solution due to some weird shenanigans with the intrinsic\r\n       height of images, or something â€“ I'm not quite sure. I could not find a way\r\n       to reliably limit the width of the item wrapper to its contents\r\n       (aka shrinkwrap). Edge/IE semi-randomly set the wrapper width to the pixel\r\n       width of the containing img instead of following the intrinsic ratio of its\r\n       height, and Firefox/Chrome introduced a phantom padding-right when toggling\r\n       the scrollbar (caused by extra width).\r\n    */\n\n\n    _toConsumableArray(itemsContainerRef.current.children).forEach(function (item) {\n      item.style.height = \"\".concat(sc.clientHeight, \"px\");\n    });\n    /* Make sure renderWithin doesn't overlap the scrollContainer's scrollbar.\r\n       `renderWithin` is absolutely positioned, so the padding and scrollbar of the\r\n       parent element are ignored.\r\n    */\n\n\n    _toConsumableArray(sc.children).forEach(function (element) {\n      element.style.maxHeight = \"\".concat(sc.clientHeight, \"px\");\n    });\n  }, [hideScrollbar]);\n  (0, _react.useEffect)(function () {\n    // IntersectionObservers only report what's _changed_, so keep a list\n    var intersectionRatios = new Map();\n    var observer = new IntersectionObserver(observerCallback, {\n      root: scrollContainerRef.current,\n      threshold: [0, 0.98]\n    });\n\n    _toConsumableArray(itemsContainerRef.current.children).forEach(function (item) {\n      observer.observe(item);\n    });\n\n    function observerCallback(entries) {\n      // Update the current intersectionRatio of each entry\n      entries.forEach(function (entry) {\n        intersectionRatios.set(parseInt(entry.target.getAttribute('data-item-id'), 10), entry.intersectionRatio);\n      }); // Update the status\n\n      var items = _toConsumableArray(itemsContainerRef.current.children);\n\n      var visibilityList = items.map(function (item) {\n        var itemIndex = item.getAttribute('data-item-id');\n        itemIndex = parseInt(itemIndex, 10);\n        var ratio = intersectionRatios.get(itemIndex);\n        var visibility;\n\n        if (ratio > 0.98) {\n          visibility = FULLY_VISIBLE;\n        } else if (ratio === 0) {\n          visibility = NOT_VISIBLE;\n        } else visibility = PARTIALLY_VISIBLE;\n\n        return {\n          index: itemIndex,\n          visibility: visibility\n        };\n      });\n      var newStatus = getStatus(visibilityList);\n      setStatus(newStatus);\n      onChange(newStatus);\n    }\n  }, []);\n  (0, _react.useEffect)(function () {\n    function handleKeyPress(event) {\n      if (scrollWithArrows && mainRef.current.contains(event.target)) {\n        if (event.key === 'ArrowRight') {\n          event.preventDefault();\n          next();\n        } else if (event.key === 'ArrowLeft') {\n          event.preventDefault();\n          previous();\n        }\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyPress);\n    return function cleanUp() {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [next, previous]);\n\n  function next() {\n    scrollTo(status.next, 'nearest');\n  }\n\n  function previous() {\n    scrollTo(status.previous, 'nearest');\n  }\n\n  function scrollTo(itemIndex) {\n    var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'center';\n\n    if (itemIndex === undefined || itemIndex === null || itemIndex < 0) {\n      return;\n    }\n\n    itemIndex = Math.min(itemIndex, items.length - 1);\n    var mainWidth = mainRef.current.offsetWidth;\n    var element = itemsContainerRef.current.children[itemIndex];\n    if (!element) return; // Option A: Center the item\n\n    if (position === 'center') {\n      var margin = (mainWidth - element.offsetWidth) / 2;\n      scrollContainerRef.current.scrollTo({\n        top: 0,\n        left: element.offsetLeft - margin,\n        // parent element must be positioned\n        behavior: 'smooth'\n      });\n    } // Option B: Fit in as many itemss as possible\n    else if (position === 'nearest') {\n      var fit = function fit(initialWidth, step) {\n        var width = 0;\n\n        while (true) {\n          var adjacentElement = itemsContainerRef.current.children[itemIndex + step];\n          if (!adjacentElement) break;\n          var adjacentWidth = adjacentElement.offsetWidth;\n\n          if (initialWidth + width + adjacentWidth < mainWidth) {\n            width += adjacentWidth;\n          } else {\n            break;\n          }\n\n          step += step;\n        }\n\n        return width;\n      }; // Determine the direction to look first\n\n\n      var step;\n\n      if (status.current.length > 0) {\n        step = itemIndex > status.current[0] ? -1 : 1;\n      } else {\n        step = itemIndex > status.previous ? -1 : 1;\n      } // Look back and ahead to see if any other items will fit too\n\n\n      var backWidth = fit(element.offsetWidth, step);\n      var aheadWidth = fit(element.offsetWidth + backWidth, -step);\n      var width = element.offsetWidth + backWidth + aheadWidth;\n\n      var _margin = (mainWidth - width) / 2;\n\n      scrollContainerRef.current.scrollTo({\n        top: 0,\n        left: element.offsetLeft - (step === 1 ? aheadWidth : backWidth) - _margin,\n        behavior: 'smooth'\n      });\n\n      if (element.offsetLeft === 0) {\n        mainRef.current.focus();\n      }\n    }\n  }\n\n  (0, _react.useImperativeHandle)(ref, function () {\n    return {\n      next: next,\n      previous: previous,\n      scrollTo: scrollTo\n    };\n  }, [next, previous, scrollTo]);\n  return _react.default.createElement(\"div\", _extends({\n    ref: mainRef,\n    tabIndex: 0\n  }, props, {\n    className: className + ' ' + /*#__PURE__*/(0, _emotion.css)(process.env.NODE_ENV === \"production\" ? {\n      name: \"1phgt8k-ImageScroller--Scroller\",\n      styles: \"height:28em;label:ImageScroller--Scroller;\"\n    } : {\n      name: \"1phgt8k-ImageScroller--Scroller\",\n      styles: \"height:28em;label:ImageScroller--Scroller;\",\n      map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n    })\n  }), _react.default.createElement(\"div\", _defineProperty({\n    ref: scrollContainerRef,\n    style: scrollContainerStyle,\n    className: scrollContainerClassName\n  }, \"style\", {\n    height: '100%',\n    overflowX: 'scroll'\n  }), renderWithin && _react.default.createElement(\"div\", {\n    className: /*#__PURE__*/(0, _emotion.css)(process.env.NODE_ENV === \"production\" ? {\n      name: \"s73t0w-ImageScroller--Scroller\",\n      styles: \"position:absolute;height:100%;left:0;right:0;pointer-events:none;z-index:20;*{pointer-events:auto;}label:ImageScroller--Scroller;\"\n    } : {\n      name: \"s73t0w-ImageScroller--Scroller\",\n      styles: \"position:absolute;height:100%;left:0;right:0;pointer-events:none;z-index:20;*{pointer-events:auto;}label:ImageScroller--Scroller;\",\n      map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n    })\n  }, renderWithin({\n    scrollTo: scrollTo,\n    next: next,\n    previous: previous,\n    items: items,\n    status: status\n  })), _react.default.createElement(\"div\", {\n    ref: itemsContainerRef,\n    className: innerClassName,\n    style: {\n      display: 'flex',\n      height: '100%',\n      position: 'relative' // for measuring offset of child items\n\n    }\n  }, items.map(function (item, itemIndex) {\n    return _react.default.cloneElement(item, {\n      'data-item-id': itemIndex,\n      key: itemIndex,\n      onClick: function onClick(event) {\n        if (scrollOnClick) {\n          event.preventDefault();\n\n          if (status.current.includes(itemIndex)) {\n            scrollTo(itemIndex, 'centre');\n          } else {\n            scrollTo(itemIndex, 'nearest');\n          }\n        }\n      },\n      className: /*#__PURE__*/(0, _emotion.css)(process.env.NODE_ENV === \"production\" ? {\n        name: \"qca9rv\",\n        styles: \"flex:0 0 auto;height:100%;width:auto;max-width:100%;object-fit:contain;overflow-y:auto;display:block;user-select:none;*{max-width:100%;object-fit:contain;}\"\n      } : {\n        name: \"qca9rv\",\n        styles: \"flex:0 0 auto;height:100%;width:auto;max-width:100%;object-fit:contain;overflow-y:auto;display:block;user-select:none;*{max-width:100%;object-fit:contain;}\",\n        map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n      }) + ' ' + (item.props.className || '')\n    });\n  }))));\n}","map":{"version":3,"sources":["C:/Users/Daniel/Documents/projects/react/dynamics-tech/node_modules/react-image-scroller/lib/ImageScroller.js"],"names":["Object","defineProperty","exports","value","default","defaultStatus","_emotion","require","_react","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","desc","getOwnPropertyDescriptor","get","set","_extends","assign","target","i","arguments","length","source","apply","_defineProperty","enumerable","configurable","writable","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","toString","Array","from","isArray","arr2","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","err","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","keys","FULLY_VISIBLE","PARTIALLY_VISIBLE","NOT_VISIBLE","previous","current","getStatus","items","prevItem","forEach","item","visibility","index","_default","forwardRef","Scroller","_ref","ref","children","_ref$className","className","_ref$hideScrollbar","hideScrollbar","_ref$innerClassName","innerClassName","_ref$innerStyle","innerStyle","_ref$onChange","onChange","_ref$renderWithin","renderWithin","_ref$scrollOnClick","scrollOnClick","_ref$scrollWithArrows","scrollWithArrows","_ref$scrollContainerC","scrollContainerClassName","_ref$scrollContainerS","scrollContainerStyle","props","Children","toArray","mainRef","useRef","scrollContainerRef","itemsContainerRef","_useState","useState","_useState2","status","setStatus","useLayoutEffect","main","sc","style","overflowX","overflowY","scrollbarWidth","clientHeight","height","concat","element","maxHeight","useEffect","intersectionRatios","Map","observer","IntersectionObserver","observerCallback","root","threshold","observe","entries","entry","parseInt","getAttribute","intersectionRatio","visibilityList","map","itemIndex","ratio","newStatus","handleKeyPress","event","contains","preventDefault","window","addEventListener","cleanUp","removeEventListener","scrollTo","position","Math","min","mainWidth","offsetWidth","margin","top","left","offsetLeft","behavior","fit","initialWidth","step","width","adjacentElement","adjacentWidth","backWidth","aheadWidth","_margin","focus","useImperativeHandle","createElement","tabIndex","css","process","env","NODE_ENV","name","styles","display","cloneElement","onClick","includes"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.defaultStatus = void 0;\n\nvar _emotion = require(\"emotion\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nrequire(\"./array-includes-polyfill\");\n\nrequire(\"./array-from-polyfill\");\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar FULLY_VISIBLE = 'FULLY_VISIBLE';\nvar PARTIALLY_VISIBLE = 'PARTIALLY_VISIBLE';\nvar NOT_VISIBLE = 'NOT_VISIBLE';\nvar defaultStatus = {\n  previous: 0,\n  current: [0],\n  next: 0\n};\nexports.defaultStatus = defaultStatus;\n\nfunction getStatus(items) {\n  var previous = null;\n  var current = [];\n  var next = null;\n  var prevItem;\n  items.forEach(function (item) {\n    // There may be any number of FULLY_VISIBLE items.\n    if (item.visibility === FULLY_VISIBLE) {\n      current.push(item.index);\n    } // There can only be two simultaneous PARTIALLY_VISIBLE items.\n    // If they are adjacent, there can be no FULLY_VISIBLE items.\n    // So these two items are 'previous' and 'next'.\n    else if (item.visibility === PARTIALLY_VISIBLE && prevItem && prevItem.visibility === PARTIALLY_VISIBLE) {\n        previous = prevItem.index;\n        next = item.index;\n      } // Keep pushing 'previous' forward each iteration until one of\n      // the above cases is true.\n      else if (current.length === 0 && next === null) {\n          previous = item.index;\n        } // The item following the final FULLY_VISIBLE item is 'next'.\n        else if (current.length > 0 && next === null) {\n            next = item.index;\n          } // Save this item to refer back to in the next iteration.\n\n\n    prevItem = item;\n  });\n  return {\n    previous: previous,\n    current: current,\n    next: next\n  };\n}\n\nvar _default = _react.default.forwardRef(Scroller);\n\nexports.default = _default;\n\nfunction Scroller(_ref, ref) {\n  var children = _ref.children,\n      _ref$className = _ref.className,\n      className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$hideScrollbar = _ref.hideScrollbar,\n      hideScrollbar = _ref$hideScrollbar === void 0 ? true : _ref$hideScrollbar,\n      _ref$innerClassName = _ref.innerClassName,\n      innerClassName = _ref$innerClassName === void 0 ? '' : _ref$innerClassName,\n      _ref$innerStyle = _ref.innerStyle,\n      innerStyle = _ref$innerStyle === void 0 ? {} : _ref$innerStyle,\n      items = _ref.items,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n      _ref$renderWithin = _ref.renderWithin,\n      renderWithin = _ref$renderWithin === void 0 ? null : _ref$renderWithin,\n      _ref$scrollOnClick = _ref.scrollOnClick,\n      scrollOnClick = _ref$scrollOnClick === void 0 ? true : _ref$scrollOnClick,\n      _ref$scrollWithArrows = _ref.scrollWithArrows,\n      scrollWithArrows = _ref$scrollWithArrows === void 0 ? true : _ref$scrollWithArrows,\n      _ref$scrollContainerC = _ref.scrollContainerClassName,\n      scrollContainerClassName = _ref$scrollContainerC === void 0 ? '' : _ref$scrollContainerC,\n      _ref$scrollContainerS = _ref.scrollContainerStyle,\n      scrollContainerStyle = _ref$scrollContainerS === void 0 ? {} : _ref$scrollContainerS,\n      props = _objectWithoutProperties(_ref, [\"children\", \"className\", \"hideScrollbar\", \"innerClassName\", \"innerStyle\", \"items\", \"onChange\", \"renderWithin\", \"scrollOnClick\", \"scrollWithArrows\", \"scrollContainerClassName\", \"scrollContainerStyle\"]);\n\n  // Either `items` or `children` may be used to set scroll items (`items` has priority)\n  items = items || _react.default.Children.toArray(children);\n  var mainRef = (0, _react.useRef)(null);\n  var scrollContainerRef = (0, _react.useRef)(null);\n  var itemsContainerRef = (0, _react.useRef)(null); // Track the indices of relevant items\n\n  var _useState = (0, _react.useState)({\n    previous: null,\n    current: [],\n    next: null\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  (0, _react.useLayoutEffect)(function () {\n    var main = mainRef.current;\n    var sc = scrollContainerRef.current;\n    sc.style.overflowX = 'scroll';\n    /* Manually hide the horizontal scrollbar with a hidden overflow.\r\n       `scrollbar-width: none` is not available across-the-board at time of implementation.\r\n    */\n\n    if (hideScrollbar) {\n      main.style.overflowY = 'hidden';\n      var scrollbarWidth = main.clientHeight - sc.clientHeight;\n      sc.style.height = \"calc(100% + \".concat(scrollbarWidth, \"px)\");\n    } else {\n      main.style.overflowY = '';\n      sc.style.height = '100%';\n    }\n    /* Manually limit the height of the contents of each item wrapper. There is no\r\n       reliable CSS solution due to some weird shenanigans with the intrinsic\r\n       height of images, or something â€“ I'm not quite sure. I could not find a way\r\n       to reliably limit the width of the item wrapper to its contents\r\n       (aka shrinkwrap). Edge/IE semi-randomly set the wrapper width to the pixel\r\n       width of the containing img instead of following the intrinsic ratio of its\r\n       height, and Firefox/Chrome introduced a phantom padding-right when toggling\r\n       the scrollbar (caused by extra width).\r\n    */\n\n\n    _toConsumableArray(itemsContainerRef.current.children).forEach(function (item) {\n      item.style.height = \"\".concat(sc.clientHeight, \"px\");\n    });\n    /* Make sure renderWithin doesn't overlap the scrollContainer's scrollbar.\r\n       `renderWithin` is absolutely positioned, so the padding and scrollbar of the\r\n       parent element are ignored.\r\n    */\n\n\n    _toConsumableArray(sc.children).forEach(function (element) {\n      element.style.maxHeight = \"\".concat(sc.clientHeight, \"px\");\n    });\n  }, [hideScrollbar]);\n  (0, _react.useEffect)(function () {\n    // IntersectionObservers only report what's _changed_, so keep a list\n    var intersectionRatios = new Map();\n    var observer = new IntersectionObserver(observerCallback, {\n      root: scrollContainerRef.current,\n      threshold: [0, 0.98]\n    });\n\n    _toConsumableArray(itemsContainerRef.current.children).forEach(function (item) {\n      observer.observe(item);\n    });\n\n    function observerCallback(entries) {\n      // Update the current intersectionRatio of each entry\n      entries.forEach(function (entry) {\n        intersectionRatios.set(parseInt(entry.target.getAttribute('data-item-id'), 10), entry.intersectionRatio);\n      }); // Update the status\n\n      var items = _toConsumableArray(itemsContainerRef.current.children);\n\n      var visibilityList = items.map(function (item) {\n        var itemIndex = item.getAttribute('data-item-id');\n        itemIndex = parseInt(itemIndex, 10);\n        var ratio = intersectionRatios.get(itemIndex);\n        var visibility;\n\n        if (ratio > 0.98) {\n          visibility = FULLY_VISIBLE;\n        } else if (ratio === 0) {\n          visibility = NOT_VISIBLE;\n        } else visibility = PARTIALLY_VISIBLE;\n\n        return {\n          index: itemIndex,\n          visibility: visibility\n        };\n      });\n      var newStatus = getStatus(visibilityList);\n      setStatus(newStatus);\n      onChange(newStatus);\n    }\n  }, []);\n  (0, _react.useEffect)(function () {\n    function handleKeyPress(event) {\n      if (scrollWithArrows && mainRef.current.contains(event.target)) {\n        if (event.key === 'ArrowRight') {\n          event.preventDefault();\n          next();\n        } else if (event.key === 'ArrowLeft') {\n          event.preventDefault();\n          previous();\n        }\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyPress);\n    return function cleanUp() {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [next, previous]);\n\n  function next() {\n    scrollTo(status.next, 'nearest');\n  }\n\n  function previous() {\n    scrollTo(status.previous, 'nearest');\n  }\n\n  function scrollTo(itemIndex) {\n    var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'center';\n\n    if (itemIndex === undefined || itemIndex === null || itemIndex < 0) {\n      return;\n    }\n\n    itemIndex = Math.min(itemIndex, items.length - 1);\n    var mainWidth = mainRef.current.offsetWidth;\n    var element = itemsContainerRef.current.children[itemIndex];\n    if (!element) return; // Option A: Center the item\n\n    if (position === 'center') {\n      var margin = (mainWidth - element.offsetWidth) / 2;\n      scrollContainerRef.current.scrollTo({\n        top: 0,\n        left: element.offsetLeft - margin,\n        // parent element must be positioned\n        behavior: 'smooth'\n      });\n    } // Option B: Fit in as many itemss as possible\n    else if (position === 'nearest') {\n        var fit = function fit(initialWidth, step) {\n          var width = 0;\n\n          while (true) {\n            var adjacentElement = itemsContainerRef.current.children[itemIndex + step];\n            if (!adjacentElement) break;\n            var adjacentWidth = adjacentElement.offsetWidth;\n\n            if (initialWidth + width + adjacentWidth < mainWidth) {\n              width += adjacentWidth;\n            } else {\n              break;\n            }\n\n            step += step;\n          }\n\n          return width;\n        };\n\n        // Determine the direction to look first\n        var step;\n\n        if (status.current.length > 0) {\n          step = itemIndex > status.current[0] ? -1 : 1;\n        } else {\n          step = itemIndex > status.previous ? -1 : 1;\n        } // Look back and ahead to see if any other items will fit too\n\n\n        var backWidth = fit(element.offsetWidth, step);\n        var aheadWidth = fit(element.offsetWidth + backWidth, -step);\n        var width = element.offsetWidth + backWidth + aheadWidth;\n\n        var _margin = (mainWidth - width) / 2;\n\n        scrollContainerRef.current.scrollTo({\n          top: 0,\n          left: element.offsetLeft - (step === 1 ? aheadWidth : backWidth) - _margin,\n          behavior: 'smooth'\n        });\n\n        if (element.offsetLeft === 0) {\n          mainRef.current.focus();\n        }\n      }\n  }\n\n  (0, _react.useImperativeHandle)(ref, function () {\n    return {\n      next: next,\n      previous: previous,\n      scrollTo: scrollTo\n    };\n  }, [next, previous, scrollTo]);\n  return _react.default.createElement(\"div\", _extends({\n    ref: mainRef,\n    tabIndex: 0\n  }, props, {\n    className: className + ' ' +\n    /*#__PURE__*/\n    (0, _emotion.css)(process.env.NODE_ENV === \"production\" ? {\n      name: \"1phgt8k-ImageScroller--Scroller\",\n      styles: \"height:28em;label:ImageScroller--Scroller;\"\n    } : {\n      name: \"1phgt8k-ImageScroller--Scroller\",\n      styles: \"height:28em;label:ImageScroller--Scroller;\",\n      map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n    })\n  }), _react.default.createElement(\"div\", _defineProperty({\n    ref: scrollContainerRef,\n    style: scrollContainerStyle,\n    className: scrollContainerClassName\n  }, \"style\", {\n    height: '100%',\n    overflowX: 'scroll'\n  }), renderWithin && _react.default.createElement(\"div\", {\n    className:\n    /*#__PURE__*/\n    (0, _emotion.css)(process.env.NODE_ENV === \"production\" ? {\n      name: \"s73t0w-ImageScroller--Scroller\",\n      styles: \"position:absolute;height:100%;left:0;right:0;pointer-events:none;z-index:20;*{pointer-events:auto;}label:ImageScroller--Scroller;\"\n    } : {\n      name: \"s73t0w-ImageScroller--Scroller\",\n      styles: \"position:absolute;height:100%;left:0;right:0;pointer-events:none;z-index:20;*{pointer-events:auto;}label:ImageScroller--Scroller;\",\n      map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n    })\n  }, renderWithin({\n    scrollTo: scrollTo,\n    next: next,\n    previous: previous,\n    items: items,\n    status: status\n  })), _react.default.createElement(\"div\", {\n    ref: itemsContainerRef,\n    className: innerClassName,\n    style: {\n      display: 'flex',\n      height: '100%',\n      position: 'relative' // for measuring offset of child items\n\n    }\n  }, items.map(function (item, itemIndex) {\n    return _react.default.cloneElement(item, {\n      'data-item-id': itemIndex,\n      key: itemIndex,\n      onClick: function onClick(event) {\n        if (scrollOnClick) {\n          event.preventDefault();\n\n          if (status.current.includes(itemIndex)) {\n            scrollTo(itemIndex, 'centre');\n          } else {\n            scrollTo(itemIndex, 'nearest');\n          }\n        }\n      },\n      className:\n      /*#__PURE__*/\n      (0, _emotion.css)(process.env.NODE_ENV === \"production\" ? {\n        name: \"qca9rv\",\n        styles: \"flex:0 0 auto;height:100%;width:auto;max-width:100%;object-fit:contain;overflow-y:auto;display:block;user-select:none;*{max-width:100%;object-fit:contain;}\"\n      } : {\n        name: \"qca9rv\",\n        styles: \"flex:0 0 auto;height:100%;width:auto;max-width:100%;object-fit:contain;overflow-y:auto;display:block;user-select:none;*{max-width:100%;object-fit:contain;}\",\n        map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n      }) + ' ' + (item.props.className || '')\n    });\n  }))));\n}"]},"metadata":{},"sourceType":"script"}