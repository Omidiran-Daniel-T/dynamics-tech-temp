{"ast":null,"code":"\"use strict\"; // https://tc39.github.io/ecma262/#sec-array.prototype.includes\n\nif (!Array.prototype.includes) {\n  Object.defineProperty(Array.prototype, 'includes', {\n    value: function value(valueToFind, fromIndex) {\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      } // 1. Let O be ? ToObject(this value).\n\n\n      var o = Object(this); // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n      var len = o.length >>> 0; // 3. If len is 0, return false.\n\n      if (len === 0) {\n        return false;\n      } // 4. Let n be ? ToInteger(fromIndex).\n      //    (If fromIndex is undefined, this step produces the value 0.)\n\n\n      var n = fromIndex | 0; // 5. If n ≥ 0, then\n      //  a. Let k be n.\n      // 6. Else n < 0,\n      //  a. Let k be len + n.\n      //  b. If k < 0, let k be 0.\n\n      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n      function sameValueZero(x, y) {\n        return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n      } // 7. Repeat, while k < len\n\n\n      while (k < len) {\n        // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n        // b. If SameValueZero(valueToFind, elementK) is true, return true.\n        if (sameValueZero(o[k], valueToFind)) {\n          return true;\n        } // c. Increase k by 1.\n\n\n        k++;\n      } // 8. Return false\n\n\n      return false;\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Daniel/Documents/projects/react/dynamics-tech/node_modules/react-image-scroller/lib/array-includes-polyfill.js"],"names":["Array","prototype","includes","Object","defineProperty","value","valueToFind","fromIndex","TypeError","o","len","length","n","k","Math","max","abs","sameValueZero","x","y","isNaN"],"mappings":"AAAA,a,CAEA;;AACA,IAAI,CAACA,KAAK,CAACC,SAAN,CAAgBC,QAArB,EAA+B;AAC7BC,EAAAA,MAAM,CAACC,cAAP,CAAsBJ,KAAK,CAACC,SAA5B,EAAuC,UAAvC,EAAmD;AACjDI,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,WAAf,EAA4BC,SAA5B,EAAuC;AAC5C,UAAI,QAAQ,IAAZ,EAAkB;AAChB,cAAM,IAAIC,SAAJ,CAAc,+BAAd,CAAN;AACD,OAH2C,CAG1C;;;AAGF,UAAIC,CAAC,GAAGN,MAAM,CAAC,IAAD,CAAd,CAN4C,CAMtB;;AAEtB,UAAIO,GAAG,GAAGD,CAAC,CAACE,MAAF,KAAa,CAAvB,CAR4C,CAQlB;;AAE1B,UAAID,GAAG,KAAK,CAAZ,EAAe;AACb,eAAO,KAAP;AACD,OAZ2C,CAY1C;AACF;;;AAGA,UAAIE,CAAC,GAAGL,SAAS,GAAG,CAApB,CAhB4C,CAgBrB;AACvB;AACA;AACA;AACA;;AAEA,UAAIM,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASH,CAAC,IAAI,CAAL,GAASA,CAAT,GAAaF,GAAG,GAAGI,IAAI,CAACE,GAAL,CAASJ,CAAT,CAA5B,EAAyC,CAAzC,CAAR;;AAEA,eAASK,aAAT,CAAuBC,CAAvB,EAA0BC,CAA1B,EAA6B;AAC3B,eAAOD,CAAC,KAAKC,CAAN,IAAW,OAAOD,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAAtC,IAAkDC,KAAK,CAACF,CAAD,CAAvD,IAA8DE,KAAK,CAACD,CAAD,CAArF;AACD,OA1B2C,CA0B1C;;;AAGF,aAAON,CAAC,GAAGH,GAAX,EAAgB;AACd;AACA;AACA,YAAIO,aAAa,CAACR,CAAC,CAACI,CAAD,CAAF,EAAOP,WAAP,CAAjB,EAAsC;AACpC,iBAAO,IAAP;AACD,SALa,CAKZ;;;AAGFO,QAAAA,CAAC;AACF,OAtC2C,CAsC1C;;;AAGF,aAAO,KAAP;AACD;AA3CgD,GAAnD;AA6CD","sourcesContent":["\"use strict\";\n\n// https://tc39.github.io/ecma262/#sec-array.prototype.includes\nif (!Array.prototype.includes) {\n  Object.defineProperty(Array.prototype, 'includes', {\n    value: function value(valueToFind, fromIndex) {\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      } // 1. Let O be ? ToObject(this value).\n\n\n      var o = Object(this); // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n      var len = o.length >>> 0; // 3. If len is 0, return false.\n\n      if (len === 0) {\n        return false;\n      } // 4. Let n be ? ToInteger(fromIndex).\n      //    (If fromIndex is undefined, this step produces the value 0.)\n\n\n      var n = fromIndex | 0; // 5. If n ≥ 0, then\n      //  a. Let k be n.\n      // 6. Else n < 0,\n      //  a. Let k be len + n.\n      //  b. If k < 0, let k be 0.\n\n      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n      function sameValueZero(x, y) {\n        return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n      } // 7. Repeat, while k < len\n\n\n      while (k < len) {\n        // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n        // b. If SameValueZero(valueToFind, elementK) is true, return true.\n        if (sameValueZero(o[k], valueToFind)) {\n          return true;\n        } // c. Increase k by 1.\n\n\n        k++;\n      } // 8. Return false\n\n\n      return false;\n    }\n  });\n}"]},"metadata":{},"sourceType":"script"}